function Render(location)

textscale = 2.0;
pos1 = [-40.0,45.0,0];
pos2 = [-40.0,42.0,0];
LPOV = [30,30,30];

ambient = 0.8;
diffuse = 0.4;

keepPOV=false;

if ~exist('location','var')
	location = uigetdir;
	if isempty(location)
		return
	end
end

% Make output folder if it doesn't exist already
if ~exist([location filesep 'image'],'dir')
	mkdir([location filesep 'image']);
end

loadFileNameList = dir([location filesep 'output' filesep '*.mat']);
loadFileNameList = {loadFileNameList.name};

for iFile=length(loadFileNameList):-1:1
	loadFileName = loadFileNameList{iFile};
	fprintf([loadFileName '\n']);
	load([location filesep 'output' filesep loadFileName]);
	NSave = length(model.ballArray(1).posSave);
	for ii=0:NSave
		povName = [location sprintf('/output/pov_g%04dm%04d_%02d.pov', model.growthIter, model.movementIter, ii)];
		if(exist(povName,'file'))
			delete(povName);
		end
		fid = fopen(povName,'a');
		
		if ii~=NSave
			plotIntermediate=true;		% If this is not the first iteration, do the intermediate plotting
		else
			plotIntermediate=false;
		end
		
		% Create camera, background and lighting based on L
		fprintf(fid,'#declare Lx = %f;\n',LPOV(1));
		fprintf(fid,'#declare Ly = %f;\n',LPOV(2));
		fprintf(fid,'#declare Lz = %f;\n\n',LPOV(3));
		fprintf(fid,['camera {\n',...
			'\tlocation <-1*Lx, 0.9*Ly,-1.0*Lz>\n',...
			'\tlook_at  <Lx/2, 0, Lz/2>\n',...
			'\tangle 50\n',...
			'}\n\n']);
		fprintf(fid,'background { color rgb <1, 1, 1> }\n\n');
		fprintf(fid,'light_source { < Lx/2,  10*Ly,  Lz/2> color rgb <1,1,1> }\n');
		fprintf(fid,'light_source { < Lx/2,  10*Ly,  Lz/2> color rgb <1,1,1> }\n');
		fprintf(fid,'light_source { < Lx/2,  10*Ly,  Lz/2> color rgb <1,1,1> }\n\n');
				
		% Build spheres and rods
		for iCell=1:length(model.cellArray)
			cell = model.cellArray(iCell);
			fprintf(fid,['// Cell no. ' num2str(iCell-1) '\n']);
			if cell.type<2
				% Spherical cell
				ball = model.ballArray(cell.ballArray(1));
				
				if plotIntermediate
					position= sprintf('\t < %10.3f,%10.3f,%10.3f > \n', ball.posSave(ii+1,1)*1e6, ball.posSave(ii+1,2)*1e6, ball.posSave(ii+1,3)*1e6);
				else
					position= sprintf('\t < %10.3f,%10.3f,%10.3f > \n', ball.pos(1)*1e6, ball.pos(2)*1e6, ball.pos(3)*1e6);
				end
				fprintf(fid,['sphere\n',...
					'{\n',...
					position,...
					sprintf('\t%10.3f\n', ball.radius*1e6),...
					'\ttexture{\n',...
					'\t\tpigment{\n',...
					sprintf('\t\t\tcolor rgb<%10.3f,%10.3f,%10.3f>\n', cell.colour(1), cell.colour(2), cell.colour(3)),...
					'\t\t}\n',...
					'\t\tfinish{\n',...
					['\t\t\tambient ' num2str(ambient) '\n'],...
					['\t\t\tdiffuse ' num2str(diffuse) '\n'],...
					'\t\t}\n',...
					'\t}\n',...
					'}\n\n']);
			elseif cell.type>1	% Rod
				ball = model.ballArray(cell.ballArray(1));
				ballNext = model.ballArray(cell.ballArray(2));
				
				if plotIntermediate
					position = [sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ball.posSave(ii+1,1)*1e6, ball.posSave(ii+1,2)*1e6, ball.posSave(ii+1,3)*1e6),...
						sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ballNext.posSave(ii+1,1)*1e6, ballNext.posSave(ii+1,2)*1e6, ballNext.posSave(ii+1,3)*1e6)];
					
					position2 = sprintf('\t < %10.3f,%10.3f,%10.3f > \n', ball.posSave(ii+1,1)*1e6, ball.posSave(ii+1,2)*1e6, ball.posSave(ii+1,3)*1e6);
					
					position3 = sprintf('\t < %10.3f,%10.3f,%10.3f > \n', ballNext.posSave(ii+1,1)*1e6, ballNext.posSave(ii+1,2)*1e6, ballNext.posSave(ii+1,3)*1e6);
				else
					position = [sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ball.pos(1)*1e6, ball.pos(2)*1e6, ball.pos(3)*1e6),...
						sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ballNext.pos(1)*1e6, ballNext.pos(2)*1e6, ballNext.pos(3)*1e6)];
					
					position2 = sprintf('\t < %10.3f,%10.3f,%10.3f > \n', ball.pos(1)*1e6, ball.pos(2)*1e6, ball.pos(3)*1e6);
					
					position3 = sprintf('\t < %10.3f,%10.3f,%10.3f > \n', ballNext.pos(1)*1e6, ballNext.pos(2)*1e6, ballNext.pos(3)*1e6);
				end
				fprintf(fid,['cylinder\n',...		% Sphere-sphere connection
					'{\n',...
					position,...
					sprintf('\t%10.3f\n', ball.radius*1e6),...
					'\ttexture{\n',...
					'\t\tpigment{\n',...
					sprintf('\t\t\tcolor rgb<%10.3f,%10.3f,%10.3f>\n', cell.colour(1), cell.colour(2), cell.colour(3)),...
					'\t\t}\n',...
					'\t\tfinish{\n',...
					['\t\t\tambient ' num2str(ambient) '\n'],...
					['\t\t\tdiffuse ' num2str(diffuse) '\n'],...
					'\t\t}\n',...
					'\t}\n',...
					'}\n',...
					'sphere\n',...			% First sphere
					'{\n',...
					position2,...
					sprintf('\t%10.3f\n', ball.radius*1e6),...
					'\ttexture{\n',...
					'\t\tpigment{\n',...
					sprintf('\t\t\tcolor rgb<%10.3f,%10.3f,%10.3f>\n', cell.colour(1), cell.colour(2), cell.colour(3)),...
					'\t\t}\n',...
					'\t\tfinish{\n',...
					['\t\t\tambient ' num2str(ambient) '\n'],...
					['\t\t\tdiffuse ' num2str(diffuse) '\n'],...
					'\t\t}\n',...
					'\t}\n',...
					'}\n',...
					'sphere\n',...			% Second sphere
					'{\n',...
					position3,...
					sprintf('\t%10.3f\n', ballNext.radius*1e6),...
					'\ttexture{\n',...
					'\t\tpigment{\n',...
					sprintf('\t\t\tcolor rgb<%10.3f,%10.3f,%10.3f>\n', cell.colour(1), cell.colour(2), cell.colour(3)),...
					'\t\t}\n',...
					'\t\tfinish{\n',...
					['\t\t\tambient ' num2str(ambient) '\n'],...
					['\t\t\tdiffuse ' num2str(diffuse) '\n'],...
					'\t\t}\n',...
					'\t}\n',...
					'}\n\n']);
			end
		end
		
		% Build filament springs
		for iFil = 1:length(model.filSpringArray)
			pFil = model.filSpringArray(iFil);
			for springType = 1:2;
				fprintf(fid,['// Filament spring no. ' num2str(iFil-1) '\n']);
				if springType==0		% Set specific things for small spring and big spring
					colour(1) = 0; colour(2) = 0; colour(3) = 1;		% Big spring is blue
					ball 	= model.ballArray(pFil.big_ballArray(1));
					ballNext = model.ballArray(pFil.big_ballArray(2));
				else
					colour(1) = 1; colour(2) = 0; colour(3) = 0;		% Small spring is red
					ball 	= model.ballArray(pFil.small_ballArray(1));
					ballNext = model.ballArray(pFil.small_ballArray(2));
				end
				
				if plotIntermediate
					position = [sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ball.posSave(ii+1,1)*1e6, ball.posSave(ii+1,2)*1e6, ball.posSave(ii+1,3)*1e6),...
						sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ballNext.posSave(ii+1,1)*1e6, ballNext.posSave(ii+1,2)*1e6, ballNext.posSave(ii+1,3)*1e6)];
				else
					position = [sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ball.pos(1)*1e6, ball.pos(2)*1e6, ball.pos(3)*1e6),...
						sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ballNext.pos(1)*1e6, ballNext.pos(2)*1e6, ballNext.pos(3)*1e6)];
				end
				fprintf(fid,['cylinder\n',...
					'{\n',...
					position,...
					sprintf('\t%10.3f\n', ball.radius*1e5),...
					'\ttexture{\n',...
					'\t\tpigment{\n',...
					sprintf('\t\t\tcolor rgb<%10.3f,%10.3f,%10.3f>\n', colour(1), colour(2), colour(3)),...
					'\t\t}\n',...
					'\t\tfinish{\n',...
					['\t\t\tambient ' num2str(ambient) '\n'],...
					['\t\t\tdiffuse ' num2str(diffuse) '\n'],...
					'\t\t}\n',...
					'\t}\n',...
					'}\n\n']);
			end
		end
		
		% Build stick spring array
		for iStick = 1:length(model.stickSpringArray)
			fprintf(fid,['// Sticking spring no. ' num2str(iStick-1) '\n']);
			pSpring = model.stickSpringArray(iStick);
			ball = model.ballArray(pSpring.ballArray(1));
			ballNext = model.ballArray(pSpring.ballArray(2));
			
			if plotIntermediate
				position = [sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ball.posSave(ii+1,1)*1e6, ball.posSave(ii+1,2)*1e6, ball.posSave(ii+1,3)*1e6),...
					sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ballNext.posSave(ii+1,1)*1e6, ballNext.posSave(ii+1,2)*1e6, ballNext.posSave(ii+1,3)*1e6)];
			else
				position = [sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ball.pos(1)*1e6, ball.pos(2)*1e6, ball.pos(3)*1e6),...
					sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', ballNext.pos(1)*1e6, ballNext.pos(2)*1e6, ballNext.pos(3)*1e6)];
			end
			fprintf(fid,['cylinder\n',...
				'{\n',...
				position,...
				sprintf('\t%10.3f\n', ball.radius*1e5),...									% 1e5 == 1/10 of the actual ball radius
				'\ttexture{\n',...
				'\t\tpigment{\n',...
				sprintf('\t\t\tcolor rgb<%10.3f,%10.3f,%10.3f>\n', 0.0, 1.0, 0.0),...		%Sticking springs are green
				'\t\t}\n',...
				'\t\tfinish{\n',...
				['\t\t\tambient ' num2str(ambient) '\n'],...
				['\t\t\tdiffuse ' num2str(diffuse) '\n'],...
				'\t\t}\n',...
				'\t}\n',...
				'}\n\n']);
		end
		
		%Build anchor spring array
		for iAnchor = 1:length(model.anchorSpringArray)
			fprintf(fid,['// Anchor spring no. ' num2str(iAnchor-1) '\n']);
			pSpring = model.anchorSpringArray(iAnchor);
			if isfield(pSpring,'ballArray')						% Workaround for old bug in saving
				ball = model.ballArray(pSpring.ballArray(1));
				if plotIntermediate
					position= sprintf('\t < %10.3f,%10.3f,%10.3f > \n', ball.posSave(ii+1,1)*1e6, ball.posSave(ii+1,2)*1e6, ball.posSave(ii+1,3)*1e6);
				else
					position= sprintf('\t < %10.3f,%10.3f,%10.3f > \n', ball.pos(1)*1e6, ball.pos(2)*1e6, ball.pos(3)*1e6);
				end
				if ~all(pSpring.anchor==ball.pos)
					fprintf(fid,['cylinder\n',...
						'{\n',...
						position,...
						sprintf('\t<%10.3f,%10.3f,%10.3f>,\n', pSpring.anchor(1)*1e6, pSpring.anchor(2)*1e6, pSpring.anchor(3)*1e6),...
						sprintf('\t%10.3f\n', ball.radius*1e5),...	% 1e5 because it is a spring
						'\ttexture{\n',...
						'\t\tpigment{\n',...
						sprintf('\t\t\tcolor rgb<%10.3f,%10.3f,%10.3f>\n', 1.0, 1.0, 0.0),...		%Anchoring springs are yellow
						'\t\t}\n',...
						'\t\tfinish{\n',...
						['\t\t\tambient ' num2str(ambient) '\n'],...
						['\t\t\tdiffuse ' num2str(diffuse) '\n'],...
						'\t\t}\n',...
						'\t}\n',...
						'}\n\n']);
				end
			end
		end
		
		% Create plane
		minPos = min([model.ballArray.pos],[],2);
		maxPos = max([model.ballArray.pos],[],2);
		Cx = num2str((minPos(1)+maxPos(1))/2*1e6);
		Cz = num2str((minPos(3)+maxPos(3))/2*1e6);
		Lx = num2str(maxPos(1)-minPos(1)*1e6);
		Lz = num2str(maxPos(3)-minPos(3)*1e6);
		
		fprintf(fid,['union {\n',...
			'\tbox {\n',...
			'\t\t<-Lx, 0, -Lz>\n',...
			'\t\t<2*Lx, 0, 2*Lz>\n',...
			...'\t\t<' Cx '-' Lx ', 0, ' Cz '-' Lz '>,\t\t\n',...
			...'\t\t<' Cx '+' Lx ', 0, ' Cz '+' Lz '>\t\t\n',...
			'\t\ttexture {\n',...
			'\t\t\tpigment{\n',...
			'\t\t\t\tcolor rgb <0.2, 0.2, 0.2>\n',...
			'\t\t\t}\n',...
			'\t\t\tfinish {\n',...
			['\t\t\t\tambient ' num2str(ambient) '\n'],...
			['\t\t\t\tdiffuse ' num2str(diffuse) '\n'],...
			'\t\t\t}\n',...
			'\t\t}\n',...
			'\t}\n\n']);
		
		% Finalise the file
		fprintf(fid,['\ttranslate <0,0,0>\n',...
			'\trotate <0,0,0>\n']);
		fprintf(fid,'}\n\n');						% Yes, we actually need this bracket
		fclose(fid);
		
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		imageName = sprintf('pov_g%04dm%04d_%02d', model.growthIter, model.movementIter, ii);
		imageLoc = [location '/image/' imageName '.png'];
		systemInput = ['povray ' povName ' +W1024 +H768 +O' location '/image/' imageName ' +A -J'];
		if(exist(imageLoc,'file')) && ~exist('keepgoing','var')
			R = input(['File already found, continue? (n/N for no): ' imageName '\n'],'s');
			if(any([R=='n',R=='N']))
				return;
			end
			keepgoing = true; %#ok<NASGU>
		end
		if keepPOV
			remove = '';
		else
			remove = [' ; rm ' povName];
		end
		[~,~] = system(['cd ' location ' ; ' systemInput   remove ' ; cd ..']);
		% Append text for movement and growth
		system(['convert -antialias -pointsize 30 -font courier-bold -annotate 0x0+30+50 ''Growth time:   ' sprintf('%5.1f h',model.growthIter*model.growthTimeStep/3600.0) '\nMovement time: ' sprintf('%5.2f s'' ',model.movementIter*model.movementTimeStepEnd+ii*model.movementTimeStep)  imageLoc ' ' imageLoc]);
	end
end
